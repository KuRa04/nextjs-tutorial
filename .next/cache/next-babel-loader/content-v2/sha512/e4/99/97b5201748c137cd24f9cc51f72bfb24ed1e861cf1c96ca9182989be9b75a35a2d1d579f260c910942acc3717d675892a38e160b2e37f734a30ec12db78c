{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostsData() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(postsDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8');\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getAllPostIds() {\n  const fileNames = fs.readdirSync(postsDirectory);\n  return fileNames.map(fileName => {\n    return {\n      params: {\n        id: fileName.replace(/\\.md$/, '')\n      }\n    };\n  });\n}\nexport function getAllPostData(id) {\n  const fullPath = path.join(postsDirectory, '${id}.md');\n  const fileContents = fs.readdirSync(fullPath, 'utf8');\n  const matterResult = matter(fileContents);\n  return _objectSpread({\n    id\n  }, matterResult.data);\n}","map":{"version":3,"sources":["/Users/asakurataichi/Documents/programing/Practice/nextjs/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date","getAllPostIds","params","getAllPostData"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AAEnC,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAE7C,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AAGA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0BS,QAA1B,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAA0B,MAA1B,CAArB;AAEA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B;AAGA;AACEH,MAAAA;AADF,OAEKK,YAAY,CAACC,IAFlB;AAID,GAfoB,CAArB;AAiBA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD;AAED,OAAO,SAASC,aAAT,GAAwB;AAC7B,QAAMhB,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,cAAf,CAAlB;AAGA,SAAOK,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAC/B,WAAO;AACLa,MAAAA,MAAM,EAAC;AACLZ,QAAAA,EAAE,EAACD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAAyB,EAAzB;AADE;AADF,KAAP;AAKD,GANM,CAAP;AAOD;AAGD,OAAO,SAASY,cAAT,CAAwBb,EAAxB,EAA2B;AAChC,QAAME,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,cAAV,EAAyB,UAAzB,CAAjB;AACA,QAAMa,YAAY,GAAGhB,EAAE,CAACS,WAAH,CAAeM,QAAf,EAAwB,MAAxB,CAArB;AAEA,QAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B;AAGA;AACEH,IAAAA;AADF,KAEKK,YAAY,CAACC,IAFlB;AAID","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postsDirectory = path.join(process.cwd(), 'posts')\n\nexport function getSortedPostsData() {\n \n  const fileNames = fs.readdirSync(postsDirectory)\n  const allPostsData = fileNames.map(fileName => {\n\n    const id = fileName.replace(/\\.md$/, '')\n\n   \n    const fullPath = path.join(postsDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    const matterResult = matter(fileContents)\n\n\n    return {\n      id,\n      ...matterResult.data\n    }\n  })\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  })\n}\n\nexport function getAllPostIds(){\n  const fileNames = fs.readdirSync(postsDirectory)\n\n\n  return fileNames.map(fileName => {\n    return {\n      params:{\n        id:fileName.replace(/\\.md$/,'')\n      }\n    }\n  })\n}\n\n\nexport function getAllPostData(id){\n  const fullPath = path.join(postsDirectory,'${id}.md')\n  const fileContents = fs.readdirSync(fullPath,'utf8')\n\n  const matterResult = matter(fileContents)\n\n\n  return {\n    id,\n    ...matterResult.data\n  }\n}"]},"metadata":{},"sourceType":"module"}