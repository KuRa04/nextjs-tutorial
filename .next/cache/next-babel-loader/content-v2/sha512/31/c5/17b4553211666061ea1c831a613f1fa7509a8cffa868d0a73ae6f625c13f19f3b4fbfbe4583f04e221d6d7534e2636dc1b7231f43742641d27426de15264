{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postDirectory = path.join(process.cwd(), 'posts');\nexport function getSortedPostData() {\n  const fileNames = fs.readdirSync(postDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    const id = fileName.replace(/\\.md$/, '');\n    const fullPath = path.join(postDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf-8');\n    const matterResult = matter(fileContents);\n    return _objectSpread({\n      id\n    }, matterResult.data);\n  });\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["/Users/asakurataichi/Documents/programing/Practice/nextjs/nextjs-blog/lib/posts.js"],"names":["fs","path","matter","postDirectory","join","process","cwd","getSortedPostData","fileNames","readdirSync","allPostsData","map","fileName","id","replace","fullPath","fileContents","readFileSync","matterResult","data","sort","a","b","date"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,MAAMC,aAAa,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAwB,OAAxB,CAAtB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAChC,QAAMC,SAAS,GAAGR,EAAE,CAACS,WAAH,CAAeN,aAAf,CAAlB;AACA,QAAMO,YAAY,GAAGF,SAAS,CAACG,GAAV,CAAcC,QAAQ,IAAI;AAE3C,UAAMC,EAAE,GAAGD,QAAQ,CAACE,OAAT,CAAiB,OAAjB,EAAyB,EAAzB,CAAX;AAGA,UAAMC,QAAQ,GAAGd,IAAI,CAACG,IAAL,CAAUD,aAAV,EAAwBS,QAAxB,CAAjB;AACA,UAAMI,YAAY,GAAGhB,EAAE,CAACiB,YAAH,CAAgBF,QAAhB,EAAyB,OAAzB,CAArB;AAGA,UAAMG,YAAY,GAAGhB,MAAM,CAACc,YAAD,CAA3B;AAGA;AACIH,MAAAA;AADJ,OAEOK,YAAY,CAACC,IAFpB;AAIH,GAhBoB,CAArB;AAkBA,SAAOT,YAAY,CAACU,IAAb,CAAkB,CAACC,CAAD,EAAGC,CAAH,KAAS;AAC9B,QAAGD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAmB;AACf,aAAO,CAAP;AACH,KAFD,MAEM;AACF,aAAO,CAAC,CAAR;AACH;AACJ,GANM,CAAP;AAOH","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\n\nconst postDirectory = path.join(process.cwd(),'posts')\n\nexport function getSortedPostData() {\n    const fileNames = fs.readdirSync(postDirectory)\n    const allPostsData = fileNames.map(fileName => {\n\n        const id = fileName.replace(/\\.md$/,'')\n\n\n        const fullPath = path.join(postDirectory,fileName)\n        const fileContents = fs.readFileSync(fullPath,'utf-8')\n\n\n        const matterResult = matter(fileContents)\n\n\n        return {\n            id,\n            ...matterResult.data\n        }\n    })\n\n    return allPostsData.sort((a,b) => {\n        if(a.date < b.date){\n            return 1\n        }else {\n            return -1\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}